function foo(a) { 
  var b = a; 
  return a + b;
 }
var c = foo( 2 ); 
//  LHS 和 RHS 引用的分析
// LHS 引用（共 3 处）:

// c = ...: 在 var c = foo( 2 ); 这行代码中，c 出现在赋值操作符 = 的左侧，因此它是一个 LHS 引用。 我们想要找到 c 的容器并将其赋值为 foo(2) 的返回值。 [1]
// a = 2 (隐式变量分配): 当调用 foo(2) 时，会隐式地将参数 2 赋给函数的参数 a。 这个赋值操作也需要进行 LHS 查询来找到 a 的容器。 [2]
// b = ...: 在函数 foo(a) 内部，var b = a; 这行代码中，b 出现在赋值操作符 = 的左侧，因此它是一个 LHS 引用。 我们想要找到 b 的容器并将其赋值为 a 的值。 [1]
// RHS 引用（共 4 处）:

// foo(2 ...): 在 var c = foo( 2 ); 这行代码中，我们需要获取 foo 的值（也就是函数本身）并执行它。 因此，foo 是一个 RHS 引用。 [3]
// = a: 在 var b = a; 这行代码中，我们需要获取 a 的值并将其赋给 b。 因此，a 是一个 RHS 引用。 [3]
// a ...: 在 return a + b; 这行代码中，我们需要获取 a 的值并将其与 b 的值相加。 因此，a 是一个 RHS 引用。 [3]
// ... b: 在 return a + b; 这行代码中，我们需要获取 b 的值并将其与 a 的值相加。 因此，b 是一个 RHS 引用。 [3]
// 总结
// LHS 引用用于找到变量的容器并对其赋值，而 RHS 引用用于获取变量的值。 在分析代码时，区分 LHS 和 RHS 引用可以帮助我们更好地理解代码的执行过程以及作用域的查找规则。